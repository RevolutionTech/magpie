MagpieExpressionLanguage {
  // can be recursive
  Exp (an expression)
    = null | SingleVarLambdaExp | BoolExp

  SingleVarLambdaExp (a single-variable lambda expression)
    = ident "=>" Exp

  FuncExp (a function call)
    = ident "(" ListOf<Exp, ","> ")"

  BoolExp (a boolean expression)
    = BoolExp "<" AddExp              -- lt
    | BoolExp "<=" AddExp             -- lte
    | BoolExp ("==" | "=") AddExp     -- eq
    | BoolExp ("!=" | "<>") AddExp    -- ne
    | BoolExp ">=" AddExp             -- gte
    | BoolExp ">" AddExp              -- gt
    | false | true | AddExp

  AddExp (a sum)
    = AddExp "+" MulExp               -- add
    | AddExp "-" MulExp               -- subtract
    | MulExp

  MulExp (a product)
    = "-" ExpExp                      -- negate
    | MulExp "*" ExpExp               -- multiply
    | MulExp "/" ExpExp               -- divide
    | MulExp "%" ExpExp               -- modulo
    | ExpExp

  ExpExp (an exponentiation)
    = ExpExp ("^" | "**") MemberExp   -- power
    | FuncExp | MemberExp

  MemberExp (a variable or element)
    = MemberExp "[" Exp "]"           -- at
    | MemberExp "." ident             -- property
    | PrimaryExp
    | ident                           -- variable

  PrimaryExp (a primary expression)
    = "(" Exp ")"                     -- paren
    | ListLiteral | string | number

  ListLiteral (a literal list)
    = "[" ListOf<Exp, ","> "]"

  ident (an identifier)
    = letter char*
  char (a character of a word)
    = letter | digit | "_"
  string (a string literal)
    = "'" (~"'" any)* "'"
    | "\"" (~"\"" any)* "\""
  number (a number literal)
    = digit* "." digit+               -- float
    | digit+                          -- int
  false (a false literal)
    = caseInsensitive<"false"> | caseInsensitive<"no">
  true (a true literal)
    = caseInsensitive<"true"> | caseInsensitive<"yes">
  null (a null literal)
    = caseInsensitive<"null"> | caseInsensitive<"none"> | caseInsensitive<"nan"> | caseInsensitive<"na">
}

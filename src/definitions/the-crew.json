{
  "numPlayers": {
    "min": 3,
    "max": 5
  },
  "globalVariables": {
    "ActivePlayerIndex": 1,
    "PlayingCardDeck": {
      "collection": [
        {
          "Suit": "blue",
          "Rank": 1
        },
        {
          "Suit": "blue",
          "Rank": 2
        },
        {
          "Suit": "blue",
          "Rank": 3
        },
        {
          "Suit": "blue",
          "Rank": 4
        },
        {
          "Suit": "blue",
          "Rank": 5
        },
        {
          "Suit": "blue",
          "Rank": 6
        },
        {
          "Suit": "blue",
          "Rank": 7
        },
        {
          "Suit": "blue",
          "Rank": 8
        },
        {
          "Suit": "blue",
          "Rank": 9
        },
        {
          "Suit": "pink",
          "Rank": 1
        },
        {
          "Suit": "pink",
          "Rank": 2
        },
        {
          "Suit": "pink",
          "Rank": 3
        },
        {
          "Suit": "pink",
          "Rank": 4
        },
        {
          "Suit": "pink",
          "Rank": 5
        },
        {
          "Suit": "pink",
          "Rank": 6
        },
        {
          "Suit": "pink",
          "Rank": 7
        },
        {
          "Suit": "pink",
          "Rank": 8
        },
        {
          "Suit": "pink",
          "Rank": 9
        },
        {
          "Suit": "green",
          "Rank": 1
        },
        {
          "Suit": "green",
          "Rank": 2
        },
        {
          "Suit": "green",
          "Rank": 3
        },
        {
          "Suit": "green",
          "Rank": 4
        },
        {
          "Suit": "green",
          "Rank": 5
        },
        {
          "Suit": "green",
          "Rank": 6
        },
        {
          "Suit": "green",
          "Rank": 7
        },
        {
          "Suit": "green",
          "Rank": 8
        },
        {
          "Suit": "green",
          "Rank": 9
        },
        {
          "Suit": "yellow",
          "Rank": 1
        },
        {
          "Suit": "yellow",
          "Rank": 2
        },
        {
          "Suit": "yellow",
          "Rank": 3
        },
        {
          "Suit": "yellow",
          "Rank": 4
        },
        {
          "Suit": "yellow",
          "Rank": 5
        },
        {
          "Suit": "yellow",
          "Rank": 6
        },
        {
          "Suit": "yellow",
          "Rank": 7
        },
        {
          "Suit": "yellow",
          "Rank": 8
        },
        {
          "Suit": "yellow",
          "Rank": 9
        },
        {
          "Suit": "trump",
          "Rank": 1
        },
        {
          "Suit": "trump",
          "Rank": 2
        },
        {
          "Suit": "trump",
          "Rank": 3
        },
        {
          "Suit": "trump",
          "Rank": 4
        }
      ]
    },
    "TaskCardDeck": {
      "collection": [
        {
          "Description": "I will win exactly 3x 6s.",
          "TaskCompleted": "=AND(COUNT(FILTER(This.WonCards, Card => Card.Rank == 6)) == 3, COUNT(FILTER(UNION(MAP(Players, Player => Player.WonCards)), Card => Card.Rank == 6)) == 4)",
          "Difficulty": 4
        },
        {
          "Description": "I will win more yellow than blue cards.",
          "Clarification": "0 blue cards is allowed.",
          "TaskCompleted": "=COUNT(FILTER(This.WonCards, Card => Card.Suit == \"yellow\")) > COUNT(FILTER(This.WonCards, Card => Card.Suit == \"blue\")) + COUNT(FILTER(UNION(MAP(Players, Player => Player.Hand)), Card => Card.Suit == \"blue\"))",
          "Difficulty": 1
        },
        {
          "Description": "I will win the green 9 with a trump.",
          "TaskCompleted": "=AND(This.LastPlayed.Suit == \"trump\", FIND(This.LastWon, Card => AND(Card.Suit == \"green\", Card.Rank == 9)))",
          "Difficulty": 3
        },
        {
          "Description": "I will win exactly 1 trump.",
          "Clarification": "If trump cards 1, 2, 3, 4 are in one hand, re-deal the playing cards.",
          "TaskCompleted": "=AND(COUNT(FILTER(This.WonCards, Card => Card.Suit == \"trump\")) == 1, COUNT(FILTER(UNION(MAP(Players, Player => Player.WonCards)), Card => Card.Suit == \"trump\")) == 4)",
          "Difficulty": 3
        },
        {
          "Description": "I will win the first trick.",
          "TaskCompleted": "=COUNT(This.WonCards) == COUNT(UNION(MAP(Players, Player => Player.WonCards)))",
          "Difficulty": 1
        },
        {
          "Description": "I will win the blue 9, pink 9, yellow 9, and green 9.",
          "TaskCompleted": "=COUNT(FILTER(This.WonCards, Card => Card.Rank == 9)) == 4",
          "Difficulty": 6
        },
        {
          "Description": "I will win more pink than green cards.",
          "Clarification": "0 green cards is allowed.",
          "TaskCompleted": "=COUNT(FILTER(This.WonCards, Card => Card.Suit == \"pink\")) > COUNT(FILTER(This.WonCards, Card => Card.Suit == \"green\")) + COUNT(FILTER(UNION(MAP(Players, Player => Player.Hand)), Card => Card.Suit == \"green\"))",
          "Difficulty": 1
        },
        {
          "Description": "I will win the blue 4.",
          "TaskCompleted": "=FIND(This.WonCards, Card => AND(Card.Suit == \"blue\", Card.Rank == 4))",
          "Difficulty": 1
        }
      ]
    },
    "TotalDifficulty": null,
    "DrawnTasks": { "collection": [] },
    "AllTasksCompleted": false,
    "CurrentCard": { "component": null },
    "Leader": null,
    "LeadSuit": null
  },
  "playerVariables": {
    "Hand": { "collection": [] },
    "Task": { "component": null },
    "Communication": { "Card": { "component": null }, "Location": null },
    "PlayArea": { "component": null },
    "LastPlayed": { "component": null },
    "LastWon": { "collection": [] },
    "WonCards": { "collection": [] }
  },
  "phases": {
    "GameConfiguration": {
      "blocks": [
        {
          "type": "input",
          "form": [
            {
              "type": "number",
              "name": "TotalDifficulty",
              "label": "What difficulty level?"
            }
          ]
        }
      ]
    },
    "DealingPlayingCards": {
      "repetition": "forever",
      "blocks": [
        {
          "type": "event",
          "eventType": "moveComponent",
          "source": "=PlayingCardDeck",
          "pickMethod": "top",
          "destination": "=CurrentCard"
        },
        {
          "type": "condition",
          "expression": "=AND(CurrentCard.Suit == \"trump\", CurrentCard.Rank == 4)",
          "whenTrue": [
            {
              "type": "event",
              "eventType": "setVariable",
              "variable": "Leader",
              "expression": "=Players[ActivePlayerIndex]"
            }
          ]
        },
        {
          "type": "event",
          "eventType": "moveComponent",
          "source": "=CurrentCard",
          "destination": "=Players[ActivePlayerIndex].Hand"
        },
        {
          "type": "condition",
          "expression": "=COUNT(PlayingCardDeck) == 0",
          "whenTrue": [
            {
              "type": "event",
              "eventType": "endPhase"
            }
          ]
        },
        {
          "type": "event",
          "eventType": "setVariable",
          "variable": "ActivePlayerIndex",
          "expression": "=(ActivePlayerIndex % COUNT(Players)) + 1"
        }
      ]
    },
    "DrawTasks": {
      "repetition": "forever",
      "blocks": [
        {
          "type": "event",
          "eventType": "moveComponent",
          "source": "=TaskCardDeck",
          "pickMethod": "criteria",
          "searchExpression": "=Task => Task.Difficulty <= TotalDifficulty - SUM(MAP(DrawnTasks, Task => Task.Difficulty))",
          "destination": "=DrawnTasks"
        },
        {
          "type": "condition",
          "expression": "=OR(SUM(MAP(DrawnTasks, Task => Task.Difficulty)) == TotalDifficulty, MIN(MAP(TaskCardDeck, Task => Task.Difficulty)) > TotalDifficulty - SUM(MAP(DrawnTasks, Task => Task.Difficulty)))",
          "whenTrue": [
            {
              "type": "event",
              "eventType": "endPhase"
            }
          ]
        }
      ]
    },
    "Setup": {
      "blocks": [
        {
          "type": "event",
          "eventType": "shuffle",
          "stack": "PlayingCardDeck"
        },
        {
          "type": "phase",
          "phase": "DealingPlayingCards"
        },
        {
          "type": "event",
          "eventType": "shuffle",
          "stack": "TaskCardDeck"
        },
        {
          "type": "phase",
          "phase": "DrawTasks"
        }
      ]
    },
    "DistributeTasks": {
      "repetition": "forEachPlayer",
      "startingPlayer": "=Leader",
      "blocks": [
        {
          "type": "event",
          "eventType": "setVariable",
          "variable": "WillTakeTask",
          "expression": "=COUNT(Players) - CurrentIndex < COUNT(DrawnTasks)"
        },
        {
          "type": "condition",
          "expression": "=NOT(WillTakeTask)",
          "whenTrue": [
            {
              "type": "input",
              "form": [
                {
                  "type": "boolean",
                  "name": "WillTakeTask",
                  "label": "Do you want to take a task?"
                }
              ]
            }
          ]
        },
        {
          "type": "condition",
          "expression": "=WillTakeTask",
          "whenTrue": [
            {
              "type": "input",
              "form": [
                {
                  "type": "card",
                  "options": "=DrawnTasks",
                  "isOptionValid": "=Option => True",
                  "name": "SelectedTask",
                  "label": "Choose a task:"
                }
              ]
            },
            {
              "type": "event",
              "eventType": "moveComponent",
              "pickMethod": "specific",
              "searchExpression": "=SelectedTask",
              "source": "=DrawnTasks",
              "destination": "=Current.Task"
            }
          ]
        },
        {
          "type": "condition",
          "expression": "=COUNT(DrawnTasks) == 0",
          "whenTrue": [
            {
              "type": "event",
              "eventType": "endPhase"
            }
          ]
        }
      ],
      "view": "DistributeTasks"
    },
    "ConsiderCommunication": {
      "repetition": "forEachPlayer",
      "blocks": [
        {
          "type": "condition",
          "expression": "=AND(ISNULL(Current.Communication.Location), COUNT(FILTER(Current.Hand, Card => Card.Suit != \"trump\")) > 0)",
          "whenTrue": [
            {
              "type": "input",
              "form": [
                {
                  "type": "boolean",
                  "name": "DoesWantCommunicate",
                  "label": "Do you want to communicate one of your cards?"
                }
              ]
            },
            {
              "type": "condition",
              "expression": "=DoesWantCommunicate",
              "whenTrue": [
                {
                  "type": "input",
                  "form": [
                    {
                      "type": "card",
                      "options": "=Current.Hand",
                      "isOptionValid": "=Option => AND(Option.Suit != \"trump\", OR(Option.Rank == MIN(MAP(FILTER(Current.Hand, Card => Card.Suit == Option.Suit), Card => Card.Rank)), Option.Rank == MAX(MAP(FILTER(Current.Hand, Card => Card.Suit == Option.Suit), Card => Card.Rank))))",
                      "name": "CardToCommunicate",
                      "label": "Choose a card:"
                    }
                  ]
                },
                {
                  "type": "event",
                  "eventType": "setVariable",
                  "variable": "Current.Communication.Location",
                  "expression": "=IFS(COUNT(FILTER(Current.Hand, Card => Card.Suit == CardToCommunicate.Suit)) == 1, \"middle\", CardToCommunicate.Rank == MIN(MAP(FILTER(Current.Hand, Card => Card.Suit == CardToCommunicate.Suit), Card => Card.Rank)), \"bottom\", \"top\")"
                },
                {
                  "type": "event",
                  "eventType": "setVariable",
                  "variable": "Current.Communication.Card",
                  "expression": "=CardToCommunicate"
                }
              ]
            }
          ]
        }
      ],
      "view": "Play"
    },
    "PlayCard": {
      "repetition": "forEachPlayer",
      "startingPlayer": "=Leader",
      "blocks": [
        {
          "type": "input",
          "form": [
            {
              "type": "card",
              "options": "=Current.Hand",
              "isOptionValid": "=Option => OR(ISNULL(LeadSuit), Option.Suit == LeadSuit, COUNT(FILTER(Current.Hand, Card => Card.Suit == LeadSuit)) == 0)",
              "name": "PlayedCard",
              "label": "Choose a card:"
            }
          ]
        },
        {
          "type": "event",
          "eventType": "setVariable",
          "variable": "Current.LastPlayed",
          "expression": "=PlayedCard"
        },
        {
          "type": "condition",
          "expression": "=ISNULL(LeadSuit)",
          "whenTrue": [
            {
              "type": "event",
              "eventType": "setVariable",
              "variable": "LeadSuit",
              "expression": "=PlayedCard.Suit"
            }
          ]
        },
        {
          "type": "event",
          "eventType": "moveComponent",
          "pickMethod": "specific",
          "searchExpression": "=PlayedCard",
          "source": "=Current.Hand",
          "destination": "=Current.PlayArea"
        }
      ],
      "view": "Play"
    },
    "DiscardPlay": {
      "repetition": "forEachPlayer",
      "blocks": [
        {
          "type": "event",
          "eventType": "moveComponent",
          "source": "=Current.PlayArea",
          "destination": "=Leader.WonCards"
        }
      ]
    },
    "Trick": {
      "blocks": [
        {
          "type": "event",
          "eventType": "setVariable",
          "variable": "LeadSuit",
          "expression": "=NULL"
        },
        {
          "type": "phase",
          "phase": "PlayCard"
        },
        {
          "type": "event",
          "eventType": "setVariable",
          "variable": "Leader",
          "expression": "=MAXBY(Players, Player => [Player.PlayArea.Suit == \"trump\", Player.PlayArea.Suit == LeadSuit, Player.PlayArea.Rank])"
        },
        {
          "type": "event",
          "eventType": "setVariable",
          "variable": "Leader.LastWon",
          "expression": "=MAP(Players, Player => Player.PlayArea)"
        },
        {
          "type": "phase",
          "phase": "DiscardPlay"
        },
        {
          "type": "event",
          "eventType": "setVariable",
          "variable": "AllTasksCompleted",
          "expression": "=ALL(MAP(Players, Player => OR(ISNULL(Player.Task), EVAL(Player.Task.TaskCompleted, Player))))"
        }
      ]
    },
    "Round": {
      "blocks": [
        {
          "type": "phase",
          "phase": "ConsiderCommunication"
        },
        {
          "type": "phase",
          "phase": "Trick"
        },
        {
          "type": "condition",
          "expression": "=OR(AllTasksCompleted, ANY(Players, Player => COUNT(Player.Hand) == 0))",
          "whenTrue": [
            {
              "type": "event",
              "eventType": "endGame",
              "winners": "=FILTER(Players, x => AllTasksCompleted)"
            }
          ]
        }
      ]
    }
  },
  "flow": [
    {
      "type": "phase",
      "phase": "GameConfiguration"
    },
    {
      "type": "phase",
      "phase": "Setup"
    },
    {
      "type": "phase",
      "phase": "DistributeTasks"
    },
    {
      "type": "phase",
      "phase": "Round",
      "repetition": "forever"
    }
  ],
  "views": {
    "DistributeTasks": [{ "label": "Tasks", "expression": "=DrawnTasks" }],
    "Play": [
      {
        "label": "Tasks",
        "expression": "=UNION(MAP(Players, Player => [Player.Task]))"
      },
      { "label": "Hand", "expression": "=Current.Hand" },
      {
        "label": "Discard",
        "expression": "=SORTED(UNION(MAP(Players, Player => Player.WonCards)), Card => [Card.Suit, Card.Rank])"
      }
    ]
  }
}
